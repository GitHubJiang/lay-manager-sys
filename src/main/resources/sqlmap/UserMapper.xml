<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.lay.shop.modules.sys.dao.UserDao">
	<resultMap id="UserResult" type="com.lay.shop.modules.sys.entity.User">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="userColumns">
	    <![CDATA[
	        	id as id,
	        	company_id as companyId,
	        	office_id as officeId,
	        	login_name as loginName,
	        	password as password,
	        	job_no as jobNo,
	        	name as name,
	        	email as email,
	        	phone as phone,
	        	mobile as mobile,
	        	user_type as userType,
	        	photo as photo,
	        	login_ip as loginIp,
	        	login_time as loginTime,
	        	login_flag as loginFlag,
	        	create_by as createBy,
	        	create_time as createTime,
	        	update_by as updateBy,
	        	update_time as updateTime,
	        	remarks as remarks,
	        	lifecycle as lifecycle
	    ]]>
	</sql>
	
		<!-- 如果有自增字段 -->
	
			<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
			<insert id="insert" parameterType="com.lay.shop.modules.sys.entity.User" 
				useGeneratedKeys="true" keyProperty="id" 
			 flushCache="true">
		    <![CDATA[
		        INSERT INTO
		        sys_user (
		        	company_id ,
		        	office_id ,
		        	login_name ,
		        	password ,
		        	job_no ,
		        	name ,
		        	email ,
		        	phone ,
		        	mobile ,
		        	user_type ,
		        	photo ,
		        	login_ip ,
		        	login_time ,
		        	login_flag ,
		        	create_by ,
		        	create_time ,
		        	update_by ,
		        	update_time ,
		        	remarks ,
		        	lifecycle 
		        ) VALUES (
		        	#{companyId,javaType=Long,jdbcType=BIGINT} ,
		        	#{officeId,javaType=Long,jdbcType=BIGINT} ,
		        	#{loginName,javaType=String,jdbcType=VARCHAR} ,
		        	#{password,javaType=String,jdbcType=VARCHAR} ,
		        	#{jobNo,javaType=String,jdbcType=VARCHAR} ,
		        	#{name,javaType=String,jdbcType=VARCHAR} ,
		        	#{email,javaType=String,jdbcType=VARCHAR} ,
		        	#{phone,javaType=String,jdbcType=VARCHAR} ,
		        	#{mobile,javaType=String,jdbcType=VARCHAR} ,
		        	#{userType,javaType=Boolean,jdbcType=BIT} ,
		        	#{photo,javaType=String,jdbcType=VARCHAR} ,
		        	#{loginIp,javaType=String,jdbcType=VARCHAR} ,
		        	#{loginTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{loginFlag,javaType=String,jdbcType=VARCHAR} ,
		        	#{createBy,javaType=Long,jdbcType=BIGINT} ,
		        	#{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{updateBy,javaType=Long,jdbcType=BIGINT} ,
		        	#{updateTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{remarks,javaType=String,jdbcType=VARCHAR} ,
		        	#{lifecycle,javaType=Boolean,jdbcType=BIT} 
		        )
		    ]]>
	
			</insert>
		
		<update id="update" parameterType="com.lay.shop.modules.sys.entity.User">
	    <![CDATA[
	        UPDATE sys_user SET
		        company_id = #{companyId,javaType=Long,jdbcType=BIGINT} ,
		        office_id = #{officeId,javaType=Long,jdbcType=BIGINT} ,
		        login_name = #{loginName,javaType=String,jdbcType=VARCHAR} ,
		        password = #{password,javaType=String,jdbcType=VARCHAR} ,
		        job_no = #{jobNo,javaType=String,jdbcType=VARCHAR} ,
		        name = #{name,javaType=String,jdbcType=VARCHAR} ,
		        email = #{email,javaType=String,jdbcType=VARCHAR} ,
		        phone = #{phone,javaType=String,jdbcType=VARCHAR} ,
		        mobile = #{mobile,javaType=String,jdbcType=VARCHAR} ,
		        user_type = #{userType,javaType=Boolean,jdbcType=BIT} ,
		        photo = #{photo,javaType=String,jdbcType=VARCHAR} ,
		        login_ip = #{loginIp,javaType=String,jdbcType=VARCHAR} ,
		        login_time = #{loginTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        login_flag = #{loginFlag,javaType=String,jdbcType=VARCHAR} ,
		        create_by = #{createBy,javaType=Long,jdbcType=BIGINT} ,
		        create_time = #{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        update_by = #{updateBy,javaType=Long,jdbcType=BIGINT} ,
		        update_time = #{updateTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        remarks = #{remarks,javaType=String,jdbcType=VARCHAR} ,
		        lifecycle = #{lifecycle,javaType=Boolean,jdbcType=BIT} 
	        WHERE 
		        id = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from sys_user where
		        id = #{id} 
	    ]]>
	    </delete> 
	    
	     <delete id="deleteByIds" parameterType="list">
	    
	        delete from sys_user 
	        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>	
	  
	    </delete>  
	         
	    <select id="findById" parameterType="java.lang.Long" resultMap="UserResult" flushCache="false">
			select <include refid="userColumns" />
		    <![CDATA[
			    from sys_user 
		        where 
		        id = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="UserResult" flushCache="false">
			select <include refid="userColumns" />
			    from sys_user 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	
	<sql id="userDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       
				<if test="id!=null">
					and id = #{id}
				</if>
	       
				<if test="companyId!=null">
					and company_id = #{companyId}
				</if>
	       
				<if test="officeId!=null">
					and office_id = #{officeId}
				</if>
	       
				<if test="loginName!=null">
					and login_name = #{loginName}
				</if>
	       
				<if test="password!=null">
					and password = #{password}
				</if>
	       
				<if test="jobNo!=null">
					and job_no = #{jobNo}
				</if>
	       
				<if test="name!=null">
					and name = #{name}
				</if>
	       
				<if test="email!=null">
					and email = #{email}
				</if>
	       
				<if test="phone!=null">
					and phone = #{phone}
				</if>
	       
				<if test="mobile!=null">
					and mobile = #{mobile}
				</if>
	       
				<if test="userType!=null">
					and user_type = #{userType}
				</if>
	       
				<if test="photo!=null">
					and photo = #{photo}
				</if>
	       
				<if test="loginIp!=null">
					and login_ip = #{loginIp}
				</if>
	       
				<if test="loginTime!=null">
					and login_time = #{loginTime}
				</if>
	       
				<if test="loginFlag!=null">
					and login_flag = #{loginFlag}
				</if>
	       
				<if test="createBy!=null">
					and create_by = #{createBy}
				</if>
	       
				<if test="createTime!=null">
					and create_time = #{createTime}
				</if>
	       
				<if test="updateBy!=null">
					and update_by = #{updateBy}
				</if>
	       
				<if test="updateTime!=null">
					and update_time = #{updateTime}
				</if>
	       
				<if test="remarks!=null">
					and remarks = #{remarks}
				</if>
	       
				<if test="lifecycle!=null">
					and lifecycle = #{lifecycle}
				</if>
		</where>
	</sql>
	

	<select id="getCount" resultType="long">
        select count(*) from sys_user 
    </select>
    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from sys_user 
		<include refid="userDynamicWhere"/>    
    </select>
    
    <select id="findListCountByParam" resultType="long">
        select count(*) from sys_user 
		<include refid="userDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="UserResult">
    	select <include refid="userColumns" />
	    from sys_user 
		<include refid="userDynamicWhere"/>
		
    </select>
    
    <select id="findListByQueryMap" resultMap="UserResult">
    	select <include refid="userColumns" />
	    from sys_user 
		<include refid="userDynamicWhere"/>
		
    </select>
    
    <select id="findListByParam" resultMap="UserResult">
    	select <include refid="userColumns" />
	    from sys_user 
		<include refid="userDynamicWhere"/>
		
    </select>

	<select id="findUserInfoByLoginName" resultMap="UserResult">
		select <include refid="userColumns" />
	    from sys_user 
	    where login_name = #{loginName}
	</select>
</mapper>
