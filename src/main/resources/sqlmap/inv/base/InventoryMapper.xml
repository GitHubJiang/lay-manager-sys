<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.lay.shop.greeston.dao.inv.InventoryDao">
	<resultMap id="InventoryResult" type="com.lay.shop.greeston.model.inv.Inventory">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="inventoryColumns">
	    <![CDATA[
	        	id as id,
	        	brand_code as brandCode,
	        	brand_name as brandName,
	        	sku_code as skuCode,
	        	sku_name as skuName,
	        	quantity as quantity,
	        	original_quantity as originalQuantity,
	        	create_time as createTime,
	        	version as version
	    ]]>
	</sql>
	
		<!-- 如果有自增字段 -->
	
			<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
			<insert id="insert" parameterType="com.lay.shop.greeston.model.inv.Inventory" 
				useGeneratedKeys="true" keyProperty="id" 
			 flushCache="true">
		    <![CDATA[
		        INSERT INTO
		        inv_inventory (
		        	brand_code ,
		        	brand_name ,
		        	sku_code ,
		        	sku_name ,
		        	quantity ,
		        	original_quantity ,
		        	create_time ,
		        	version 
		        ) VALUES (
		        	#{brandCode,javaType=String,jdbcType=VARCHAR} ,
		        	#{brandName,javaType=String,jdbcType=VARCHAR} ,
		        	#{skuCode,javaType=String,jdbcType=VARCHAR} ,
		        	#{skuName,javaType=String,jdbcType=VARCHAR} ,
		        	#{quantity,javaType=Integer,jdbcType=INTEGER} ,
		        	#{originalQuantity,javaType=Integer,jdbcType=INTEGER} ,
		        	#{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        	#{version,javaType=java.util.Date,jdbcType=TIMESTAMP} 
		        )
		    ]]>
	
			</insert>
		
		<update id="update" parameterType="com.lay.shop.greeston.model.inv.Inventory">
	    <![CDATA[
	        UPDATE inv_inventory SET
		        brand_code = #{brandCode,javaType=String,jdbcType=VARCHAR} ,
		        brand_name = #{brandName,javaType=String,jdbcType=VARCHAR} ,
		        sku_code = #{skuCode,javaType=String,jdbcType=VARCHAR} ,
		        sku_name = #{skuName,javaType=String,jdbcType=VARCHAR} ,
		        quantity = #{quantity,javaType=Integer,jdbcType=INTEGER} ,
		        original_quantity = #{originalQuantity,javaType=Integer,jdbcType=INTEGER} ,
		        create_time = #{createTime,javaType=java.util.Date,jdbcType=TIMESTAMP} ,
		        version = #{version,javaType=java.util.Date,jdbcType=TIMESTAMP} 
	        WHERE 
		        id = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from inv_inventory where
		        id = #{id} 
	    ]]>
	    </delete> 
	    
	     <delete id="deleteByIds" parameterType="list">
	    
	        delete from inv_inventory 
	        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>	
	  
	    </delete>  
	         
	    <select id="findById" parameterType="java.lang.Long" resultMap="InventoryResult" flushCache="false">
			select <include refid="inventoryColumns" />
		    <![CDATA[
			    from inv_inventory 
		        where 
		        id = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="InventoryResult" flushCache="false">
			select <include refid="inventoryColumns" />
			    from inv_inventory 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	
	<sql id="inventoryDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       
				<if test="id!=null">
					and id = #{id}
				</if>
	       
				<if test="brandCode!=null">
					and brand_code = #{brandCode}
				</if>
	       
				<if test="brandName!=null">
					and brand_name = #{brandName}
				</if>
	       
				<if test="skuCode!=null">
					and sku_code = #{skuCode}
				</if>
	       
				<if test="skuName!=null">
					and sku_name = #{skuName}
				</if>
	       
				<if test="quantity!=null">
					and quantity = #{quantity}
				</if>
	       
				<if test="originalQuantity!=null">
					and original_quantity = #{originalQuantity}
				</if>
	       
				<if test="createTime!=null">
					and create_time = #{createTime}
				</if>
	       
				<if test="version!=null">
					and version = #{version}
				</if>
		</where>
	</sql>
	

	<select id="getCount" resultType="long">
        select count(*) from inv_inventory 
    </select>
    <select id="findListCountByQueryMap" resultType="long">
        select count(*) from inv_inventory 
		<include refid="inventoryDynamicWhere"/>    
    </select>
    
    <select id="findListCountByParam" resultType="long">
        select count(*) from inv_inventory 
		<include refid="inventoryDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findListByQueryMapWithPage" resultMap="InventoryResult">
    	select <include refid="inventoryColumns" />
	    from inv_inventory 
		<include refid="inventoryDynamicWhere"/>
		
    </select>
    
    <select id="findListByQueryMap" resultMap="InventoryResult">
    	select <include refid="inventoryColumns" />
	    from inv_inventory 
		<include refid="inventoryDynamicWhere"/>
		
    </select>
    
    <select id="findListByParam" resultMap="InventoryResult">
    	select <include refid="inventoryColumns" />
	    from inv_inventory 
		<include refid="inventoryDynamicWhere"/>
		
    </select>

	
</mapper>
